name: Test and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # VÉRIFICATIONS DES BUILDS ET TESTS
  backend-test:
    name: Backend - Tests avec Docker
    runs-on: ubuntu-latest

     # Variables non-sensibles globales pour ce job
    env:
     DATABASE_NAME_TEST: jobtracker_test
     TEST_ENV: github
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install MongoDB
      run: |
        wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-org
        sudo systemctl start mongod
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
        pip install pytest pytest-cov
        
    - name: Verify code compilation
      run: |
        cd backend
        python -m compileall .
    
    - name: Create MongoDB test user
      run: |
         mongosh --eval "db = db.getSiblingDB('admin'); db.createUser({user: '${{ secrets.MONGO_TEST_USER }}', pwd: '${{ secrets.MONGO_TEST_PASSWORD }}', roles: [{role: 'root', db: 'admin'}]})"
    
    - name: Create .env file
      run: |
          cat > backend/.env << EOF
          MONGO_TEST_USER=${{secrets.MONGO_TEST_USER }}
          MONGO_TEST_PASSWORD=${{ secrets.MONGO_TEST_PASSWORD }}
          DATABASE_NAME_TEST=jobtracker_test
          MONGO_LOCAL_TEST_HOST=localhost
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ALGORITHM=HS256
          TEST_ENV=github
          EOF
        
    - name: Run tests
      run: |
        cd backend
        if [ -d "tests" ] || [ -f "test_*.py" ]; then
          python -m pytest tests/ -v
        else
          echo "Aucun test trouvé"
        fi

  frontend-test:
    name: Frontend - Build & Tests  
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci || npm install
        
    - name: Verify build
      run: |
        cd frontend
        npm run build || echo "Build en échec mais on continue"
      continue-on-error: true
      
    - name: Run tests (si disponibles)
      run: |
        cd frontend
        if grep -q "\"test\":" package.json; then
          npm test || echo "Tests en échec mais on continue"
        else
          echo "Aucun test trouvé"
        fi
      continue-on-error: true