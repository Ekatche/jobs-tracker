name: Test and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # VÉRIFICATIONS DES BUILDS ET TESTS
  backend-test:
    name: Backend - Tests avec Docker
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        env:

          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_TEST_USER }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_TEST_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          pip install pytest pytest-cov
      - name: Create .env file
        run: |
          cat > backend/.env << EOF
          MONGO_TEST_USER=${{ secrets.MONGO_TEST_USER }}
          MONGO_TEST_PASSWORD=${{ secrets.MONGO_TEST_PASSWORD }}
          DATABASE_NAME_TEST=jobtracker_test
          MONGO_LOCAL_TEST_HOST=localhost
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ALGORITHM=HS256
          TEST_ENV=github
          MONGO_USER=${{ secrets.MONGO_TEST_USER }}
          MONGO_PASSWORD=${{ secrets.MONGO_TEST_PASSWORD }}
          DATABASE_NAME=jobtracker_test
          MONGO_HOST=localhost
          EOF
          
      - name: Create uploads directory
        run: mkdir -p backend/app/uploads

      - name: Run tests
        run: |
          cd backend
          python -m pytest tests/ -v

  frontend-test:
    name: Frontend - Build & Tests  
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci || npm install
        
    - name: Verify build
      run: |
        cd frontend
        npm run build || echo "Build en échec mais on continue"
      continue-on-error: true
      
    - name: Run tests (si disponibles)
      run: |
        cd frontend
        if grep -q "\"test\":" package.json; then
          npm test || echo "Tests en échec mais on continue"
        else
          echo "Aucun test trouvé"
        fi
      continue-on-error: true