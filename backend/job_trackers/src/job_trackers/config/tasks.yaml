convert_query_task:
  description: >
    Prendre la demande de l'utilisateur : {user_query} et la convertir en une requête optimisée pour un moteur de recherche.
    
    Tu es un expert en recherche d'offres d'emploi. Transforme la question en une requête de recherche
    concise et efficace pour trouver des offres d'emploi. La requête doit être optimisée pour un moteur de recherche.
    
    Exemples:
    - Question: "Je cherche un poste de data scientist à Lyon"
      Requête: "offres emploi data scientist Lyon"
    
    Retourne UNIQUEMENT le texte, sans explications ni formatage supplémentaire.
  expected_output: >
    Une requête concise et efficace, prête à être utilisée dans un moteur de recherche.
  agent: query_converter
  input_variables:
    user_query: ${inputs.user_query}

execute_search_task:
  description: >
    Utiliser la requête optimisée pour effectuer une recherche et récupérer les URLs des résultats pertinents.
    
    Tu dois utiliser l'outil "Recherche d'offres d'emploi sur job boards" en lui passant UNIQUEMENT la requête 
    sous forme de texte simple. Assure-toi de ne pas envoyer d'objets ou de structures complexes.
    
    Exemple:
    - Si tu reçois la requête: "offres emploi data scientist Lyon"
    - Utilise l'outil en passant exactement cette chaîne de caractères
    
    Liste ensuite les URLs obtenues.

  expected_output: >
    Retourne uniquement un tableau JSON contenant les URLs trouvées, sans aucun commentaire ni texte additionnel.
    Exemple :
    ["https://www.site1.com/offre-emploi/12345", "https://www.site2.fr/jobs/56789"]
    Si aucune URL pertinente n'est trouvée, retourne [].
    
  agent: search_executor
  input_variables:
    query: ${convert_query_task.output}

filter_urls_task:
  description: >
    Filtrer la liste d'URLs obtenue pour ne garder que les liens les plus pertinents et fiables par rapport à la demande initiale, et retirer les doublons.
    Critères de filtrage:
    - Pertinence: URLs qui correspondent bien à la requête originale (titre, description, entreprise)
    - Fiabilité: Sites reconnus et officiels (priorité aux sites de recrutement français)
    - Diversité: Garde une variété d'offres (différentes entreprises, différents sites)
    - Pas de doublons: Élimine les URLs qui pointent vers la même offre
    
    Présente les résultats dans une liste classée par ordre de pertinence.

  expected_output: >
    Retourne uniquement un tableau JSON contenant les URLs filtrées, sans aucun commentaire ni texte additionnel.
    Exemple :
    ["https://www.site1.com/offre-emploi/12345", "https://www.site2.fr/jobs/56789", "https://www.site3.fr/annonce-987654"]
    Si aucune URL pertinente n'est trouvée, retourne [].
    
    Aucune explication ou commentaire ne doit être ajouté avant ou après cette liste.
    Si aucune URL pertinente n'est trouvée, répondre uniquement "Aucun résultat pertinent trouvé.
  agent: url_filter
  input_variables:
    urls: ${execute_search_task.output}
    original_query: ${convert_query_task.output}
