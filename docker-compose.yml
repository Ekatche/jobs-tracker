services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - TEST_ENV=docker
      - MONGO_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/${DATABASE_NAME}?authSource=admin
      - DATABASE_NAME=${DATABASE_NAME}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_HOST=mongodb
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${DATABASE_NAME}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - app-network

  mongo-express:
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USER}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network
  
  mongo_test:
    image: mongo:latest
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_TEST_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_TEST_PASSWORD}
      - MONGO_INITDB_DATABASE=${DATABASE_NAME_TEST}
    volumes:
      - mongodb_test_data:/data/db
    networks:
      - app-network

  airflow-restarter:
    image: alpine
    depends_on:
      - airflow
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=Europe/Paris
    command: >
      sh -c "
      apk add --no-cache docker-cli &&
      echo '0 21 * * * /usr/bin/docker restart jobtracker-airflow' > /etc/crontabs/root &&
      crond -f -l 2
      "
    networks:
      - app-network

  # Airflow
  airflow:
    container_name: jobtracker-airflow
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./airflow/dags:/opt/airflow/dags
      - airflow_data:/opt/airflow
    environment:
      - TZ=Europe/Paris
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT=300
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY:-change_me}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_HOST=mongodb
      - DATABASE_NAME=${DATABASE_NAME}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    command: >
        bash -c "pip install pymongo &&
        mkdir -p /opt/airflow &&
        chmod -R 777 /opt/airflow &&
        airflow standalone"
    networks:
      - app-network
    restart: unless-stopped

volumes:
  mongodb_data:
  airflow_data:
  mongodb_test_data:

networks:
  app-network: